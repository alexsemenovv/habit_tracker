import logging
import httpx

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message

from backend.dao.dao import UserDAO

logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s - [%(levelname)s] -  %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s")
logger = logging.getLogger(__name__)

start_router = Router()


@start_router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /start")

    user = await UserDAO.find_one_or_none(telegram_id=message.from_user.id)

    if not user:
        logger.info("USER –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # TODO —Å—Ç—Ä–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ httpx –∑–¥–µ—Å—å. –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É
        async with httpx.AsyncClient() as client:
            response = await client.post(
                'http://localhost:8000/auth/register',
                json={
                    "telegram_id": message.from_user.id,
                    "first_name": message.from_user.first_name,
                    "username": message.from_user.username,
                    "last_name": message.from_user.last_name
                },
                timeout=5  # –¢–∞–π–º-–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            )
        if response.status_code == 200:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!üëã\n"
        "–≠—Ç–æ –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫üëÅ\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç –∂–º–∏ /helpüëà\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∂–º–∏ /commands"
    )
